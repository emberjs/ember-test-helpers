{"version":3,"file":"validate-error-handler.js","sources":["../src/validate-error-handler.ts"],"sourcesContent":["// Private API\nimport { getOnerror } from '@ember/-internals/error-handling';\n// Private API\nimport { isTesting, setTesting } from '@ember/debug';\n\ntype ErrorHandlerValidation =\n  | Readonly<{ isValid: true; message: null }>\n  | Readonly<{ isValid: false; message: string }>;\n\nconst VALID = Object.freeze({ isValid: true, message: null });\nconst INVALID = Object.freeze({\n  isValid: false,\n  message: 'error handler should have re-thrown the provided error',\n});\n\n/**\n * Validate the provided error handler to confirm that it properly re-throws\n * errors when `Ember.testing` is true.\n *\n * This is intended to be used by test framework hosts (or other libraries) to\n * ensure that `Ember.onerror` is properly configured. Without a check like\n * this, `Ember.onerror` could _easily_ swallow all errors and make it _seem_\n * like everything is just fine (and have green tests) when in reality\n * everything is on fire...\n *\n * @public\n * @param {Function} [callback=Ember.onerror] the callback to validate\n * @returns {Object} object with `isValid` and `message`\n *\n * @example <caption>Example implementation for `ember-qunit`</caption>\n *\n * import { validateErrorHandler } from '@ember/test-helpers';\n *\n * test('Ember.onerror is functioning properly', function(assert) {\n *   let result = validateErrorHandler();\n *   assert.ok(result.isValid, result.message);\n * });\n */\nexport default function validateErrorHandler(\n  callback = getOnerror(),\n): ErrorHandlerValidation {\n  if (callback === undefined || callback === null) {\n    return VALID;\n  }\n\n  const error = new Error('Error handler validation error!');\n\n  const originalEmberTesting = isTesting();\n  setTesting(true);\n  try {\n    callback(error);\n  } catch (e) {\n    if (e === error) {\n      return VALID;\n    }\n  } finally {\n    setTesting(originalEmberTesting);\n  }\n\n  return INVALID;\n}\n"],"names":["VALID","Object","freeze","isValid","message","INVALID","validateErrorHandler","callback","getOnerror","undefined","error","Error","originalEmberTesting","isTesting","setTesting","e"],"mappings":";;;AAAA;AASA,MAAMA,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC;AAAEC,EAAAA,OAAO,EAAE,IAAI;AAAEC,EAAAA,OAAO,EAAE,IAAA;AAAK,CAAC,CAAC,CAAA;AAC7D,MAAMC,OAAO,GAAGJ,MAAM,CAACC,MAAM,CAAC;AAC5BC,EAAAA,OAAO,EAAE,KAAK;AACdC,EAAAA,OAAO,EAAE,wDAAA;AACX,CAAC,CAAC,CAAA;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASE,oBAAoBA,CAC1CC,QAAQ,GAAGC,UAAU,EAAE,EACC;AACxB,EAAA,IAAID,QAAQ,KAAKE,SAAS,IAAIF,QAAQ,KAAK,IAAI,EAAE;AAC/C,IAAA,OAAOP,KAAK,CAAA;AACd,GAAA;AAEA,EAAA,MAAMU,KAAK,GAAG,IAAIC,KAAK,CAAC,iCAAiC,CAAC,CAAA;AAE1D,EAAA,MAAMC,oBAAoB,GAAGC,SAAS,EAAE,CAAA;EACxCC,UAAU,CAAC,IAAI,CAAC,CAAA;EAChB,IAAI;IACFP,QAAQ,CAACG,KAAK,CAAC,CAAA;GAChB,CAAC,OAAOK,CAAC,EAAE;IACV,IAAIA,CAAC,KAAKL,KAAK,EAAE;AACf,MAAA,OAAOV,KAAK,CAAA;AACd,KAAA;AACF,GAAC,SAAS;IACRc,UAAU,CAACF,oBAAoB,CAAC,CAAA;AAClC,GAAA;AAEA,EAAA,OAAOP,OAAO,CAAA;AAChB;;;;"}