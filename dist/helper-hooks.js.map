{"version":3,"file":"helper-hooks.js","sources":["../src/helper-hooks.ts"],"sourcesContent":["export type Hook = (...args: any[]) => void | Promise<void>;\nexport type HookLabel = 'start' | 'end' | 'targetFound';\nexport type HookUnregister = {\n  unregister: () => void;\n};\n\nconst registeredHooks = new Map<string, Set<Hook>>();\n\n/**\n * @private\n * @param {string} helperName The name of the test helper in which to run the hook.\n * @param {string} label A label to help identify the hook.\n * @returns {string} The compound key for the helper.\n */\nfunction getHelperKey(helperName: string, label: string): string {\n  return `${helperName}:${label}`;\n}\n\n/**\n * Registers a function to be run during the invocation of a test helper.\n *\n * @param {string} helperName The name of the test helper in which to run the hook.\n *                            Test helper names include `blur`, `click`, `doubleClick`, `fillIn`,\n *                            `fireEvent`, `focus`, `render`, `scrollTo`, `select`, `tab`, `tap`, `triggerEvent`,\n *                            `triggerKeyEvent`, `typeIn`, and `visit`.\n * @param {string} label A label to help identify the hook. Built-in labels include `start`, `end`,\n *                       and `targetFound`, the former designating either the start or end of\n *                       the helper invocation.\n * @param {Function} hook The hook function to run when the test helper is invoked.\n * @returns {HookUnregister} An object containing an `unregister` function that unregisters\n *                           the specific hook initially registered to the helper.\n * @example\n * <caption>\n *   Registering a hook for the `end` point of the `click` test helper invocation\n * </caption>\n *\n * const hook = registerHook('click', 'end', () => {\n *   console.log('Running `click:end` test helper hook');\n * });\n *\n * // Unregister the hook at some later point in time\n * hook.unregister();\n */\nexport function registerHook(\n  helperName: string,\n  label: HookLabel,\n  hook: Hook,\n): HookUnregister {\n  const helperKey = getHelperKey(helperName, label);\n  let hooksForHelper = registeredHooks.get(helperKey);\n\n  if (hooksForHelper === undefined) {\n    hooksForHelper = new Set<Hook>();\n    registeredHooks.set(helperKey, hooksForHelper);\n  }\n\n  hooksForHelper.add(hook);\n\n  return {\n    unregister() {\n      hooksForHelper!.delete(hook);\n    },\n  };\n}\n\n/**\n * Runs all hooks registered for a specific test helper.\n *\n * @param {string} helperName The name of the test helper in which to run the hook.\n *                            Test helper names include `blur`, `click`, `doubleClick`, `fillIn`,\n *                            `fireEvent`, `focus`, `render`, `scrollTo`, `select`, `tab`, `tap`, `triggerEvent`,\n *                            `triggerKeyEvent`, `typeIn`, and `visit`.\n * @param {string} label A label to help identify the hook. Built-in labels include `start`, `end`,\n *                       and `targetFound`, the former designating either the start or end of\n *                       the helper invocation.\n * @param {unknown[]} args Any arguments originally passed to the test helper.\n * @returns {Promise<void>} A promise representing the serial invocation of the hooks.\n */\nexport function runHooks(\n  helperName: string,\n  label: HookLabel,\n  ...args: unknown[]\n): Promise<void> {\n  const hooks =\n    registeredHooks.get(getHelperKey(helperName, label)) || new Set<Hook>();\n  const promises: Array<void | Promise<void>> = [];\n\n  hooks.forEach((hook) => {\n    const hookResult = hook(...args);\n\n    promises.push(hookResult);\n  });\n\n  return Promise.all(promises).then(() => {});\n}\n"],"names":["registeredHooks","Map","getHelperKey","helperName","label","registerHook","hook","helperKey","hooksForHelper","get","undefined","Set","set","add","unregister","delete","runHooks","args","hooks","promises","forEach","hookResult","push","Promise","all","then"],"mappings":"AAMA,MAAMA,eAAe,GAAG,IAAIC,GAAG,EAAqB,CAAA;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAACC,UAAkB,EAAEC,KAAa,EAAU;AAC/D,EAAA,OAAO,CAAGD,EAAAA,UAAU,CAAIC,CAAAA,EAAAA,KAAK,CAAE,CAAA,CAAA;AACjC,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,YAAYA,CAC1BF,UAAkB,EAClBC,KAAgB,EAChBE,IAAU,EACM;AAChB,EAAA,MAAMC,SAAS,GAAGL,YAAY,CAACC,UAAU,EAAEC,KAAK,CAAC,CAAA;AACjD,EAAA,IAAII,cAAc,GAAGR,eAAe,CAACS,GAAG,CAACF,SAAS,CAAC,CAAA;EAEnD,IAAIC,cAAc,KAAKE,SAAS,EAAE;AAChCF,IAAAA,cAAc,GAAG,IAAIG,GAAG,EAAQ,CAAA;AAChCX,IAAAA,eAAe,CAACY,GAAG,CAACL,SAAS,EAAEC,cAAc,CAAC,CAAA;AAChD,GAAA;AAEAA,EAAAA,cAAc,CAACK,GAAG,CAACP,IAAI,CAAC,CAAA;EAExB,OAAO;AACLQ,IAAAA,UAAUA,GAAG;AACXN,MAAAA,cAAc,CAAEO,MAAM,CAACT,IAAI,CAAC,CAAA;AAC9B,KAAA;GACD,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASU,QAAQA,CACtBb,UAAkB,EAClBC,KAAgB,EAChB,GAAGa,IAAe,EACH;AACf,EAAA,MAAMC,KAAK,GACTlB,eAAe,CAACS,GAAG,CAACP,YAAY,CAACC,UAAU,EAAEC,KAAK,CAAC,CAAC,IAAI,IAAIO,GAAG,EAAQ,CAAA;EACzE,MAAMQ,QAAqC,GAAG,EAAE,CAAA;AAEhDD,EAAAA,KAAK,CAACE,OAAO,CAAEd,IAAI,IAAK;AACtB,IAAA,MAAMe,UAAU,GAAGf,IAAI,CAAC,GAAGW,IAAI,CAAC,CAAA;AAEhCE,IAAAA,QAAQ,CAACG,IAAI,CAACD,UAAU,CAAC,CAAA;AAC3B,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOE,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC,CAACM,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;AAC7C;;;;"}