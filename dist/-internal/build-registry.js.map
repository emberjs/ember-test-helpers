{"version":3,"file":"build-registry.js","sources":["../../src/-internal/build-registry.ts"],"sourcesContent":["import type { Resolver } from '@ember/owner';\nimport ApplicationInstance from '@ember/application/instance';\nimport Application from '@ember/application';\nimport EmberObject from '@ember/object';\nimport { Registry } from '@ember/-internals/container';\n\nimport type { FullName } from '@ember/owner';\n\nimport {\n  ContainerProxyMixin,\n  RegistryProxyMixin,\n} from '@ember/-internals/runtime';\n\n/**\n * Adds methods that are normally only on registry to the container. This is largely to support the legacy APIs\n * that are not using `owner` (but are still using `this.container`).\n *\n * @private\n * @param {Object} container  the container to modify\n */\nfunction exposeRegistryMethodsWithoutDeprecations(container: any) {\n  const methods = [\n    'register',\n    'unregister',\n    'resolve',\n    'normalize',\n    'typeInjection',\n    'injection',\n    'factoryInjection',\n    'factoryTypeInjection',\n    'has',\n    'options',\n    'optionsForType',\n  ];\n\n  for (let i = 0, l = methods.length; i < l; i++) {\n    const methodName = methods[i];\n\n    if (methodName && methodName in container) {\n      const knownMethod = methodName;\n      container[knownMethod] = function (...args: unknown[]) {\n        return container._registry[knownMethod](...args);\n      };\n    }\n  }\n}\n\n// NOTE: this is the same as what `EngineInstance`/`ApplicationInstance`\n// implement, and is thus a superset of the `InternalOwner` contract from Ember\n// itself.\ninterface Owner extends RegistryProxyMixin, ContainerProxyMixin {}\nconst Owner = EmberObject.extend(RegistryProxyMixin, ContainerProxyMixin, {\n  _emberTestHelpersMockOwner: true,\n\n  /* eslint-disable valid-jsdoc */\n  /**\n   * Unregister a factory and its instance.\n   *\n   * Overrides `RegistryProxy#unregister` in order to clear any cached instances\n   * of the unregistered factory.\n   *\n   * @param {string} fullName Name of the factory to unregister.\n   *\n   * @see {@link https://github.com/emberjs/ember.js/pull/12680}\n   * @see {@link https://github.com/emberjs/ember.js/blob/v4.5.0-alpha.5/packages/%40ember/engine/instance.ts#L152-L167}\n   */\n  /* eslint-enable valid-jsdoc */\n  unregister(this: Owner, fullName: FullName) {\n    // SAFETY: this is always present, but only the stable type definitions from\n    // Ember actually preserve it, since it is private API.\n    (this as any)['__container__'].reset(fullName);\n\n    // We overwrote this method from RegistryProxyMixin.\n    // SAFETY: this is always present, but only the stable type definitions from\n    // Ember actually preserve it, since it is private API.\n    (this as any)['__registry__'].unregister(fullName);\n  },\n});\n\n/**\n * @private\n * @param {Object} resolver the resolver to use with the registry\n * @returns {Object} owner, container, registry\n */\nexport default function buildRegistry(resolver: Resolver) {\n  const namespace = new Application();\n  // @ts-ignore: this is actually the correcct type, but there was a typo in\n  // Ember's docs for many years which meant that there was a matching problem\n  // in the types for Ember's definition of `Engine`. Once we require at least\n  // Ember 5.1 (in some future breaking change), this ts-ignore can be removed.\n  namespace.Resolver = {\n    create() {\n      return resolver;\n    },\n  };\n\n  // @ts-ignore: this is private API.\n  const fallbackRegistry = Application.buildRegistry(namespace);\n\n  const registry = new Registry({\n    fallback: fallbackRegistry,\n  });\n\n  // @ts-ignore: this is private API.\n  ApplicationInstance.setupRegistry(registry);\n\n  // these properties are set on the fallback registry by `buildRegistry`\n  // and on the primary registry within the ApplicationInstance constructor\n  // but we need to manually recreate them since ApplicationInstance's are not\n  // exposed externally\n  // @ts-ignore: this is private API.\n  registry.normalizeFullName = fallbackRegistry.normalizeFullName;\n  // @ts-ignore: this is private API.\n  registry.makeToString = fallbackRegistry.makeToString;\n  // @ts-ignore: this is private API.\n  registry.describe = fallbackRegistry.describe;\n\n  const owner = Owner.create({\n    // @ts-ignore -- we do not have type safety for `Object.extend` so the type\n    // of `Owner` here is just `EmberObject`, but we *do* constrain it to allow\n    // only types from the actual class, so these fields are not accepted.\n    // However, we can see that they are valid, based on the definition of\n    // `Owner` above given that it fulfills the `InternalOwner` contract and\n    // also extends it just as `EngineInstance` does internally.\n    //\n    // NOTE: we use an `ignore` directive rather than `expect-error` because in\n    // *some* versions of the types, we *do* have (at least some of) this\n    // safety, and maximal backwards compatibility means we have to account for\n    // that.\n    __registry__: registry,\n    __container__: null,\n  }) as unknown as Owner;\n\n  // @ts-ignore: this is private API.\n  const container = registry.container({ owner: owner });\n  // @ts-ignore: this is private API.\n  owner.__container__ = container;\n\n  exposeRegistryMethodsWithoutDeprecations(container);\n\n  return {\n    registry,\n    container,\n    owner,\n  };\n}\n"],"names":["exposeRegistryMethodsWithoutDeprecations","container","methods","i","l","length","methodName","knownMethod","args","_registry","Owner","EmberObject","extend","RegistryProxyMixin","ContainerProxyMixin","_emberTestHelpersMockOwner","unregister","fullName","reset","buildRegistry","resolver","namespace","Application","Resolver","create","fallbackRegistry","registry","Registry","fallback","ApplicationInstance","setupRegistry","normalizeFullName","makeToString","describe","owner","__registry__","__container__"],"mappings":"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"}