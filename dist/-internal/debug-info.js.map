{"version":3,"file":"debug-info.js","sources":["../../src/-internal/debug-info.ts"],"sourcesContent":["// @ts-ignore: this is private API. This import will work Ember 5.1+ since it\n// \"provides\" this public API, but does not for earlier versions. As a result,\n// this type will be `any`.\nimport { _backburner } from '@ember/runloop';\nimport type { DebugInfo as BackburnerDebugInfo } from '@ember/runloop/-private/backburner';\nimport {\n  type DebugInfoHelper,\n  debugInfoHelpers,\n} from './debug-info-helpers.ts';\nimport {\n  getPendingWaiterState,\n  type PendingWaiterState,\n} from '@ember/test-waiters';\n\nconst PENDING_AJAX_REQUESTS = 'Pending AJAX requests';\nconst PENDING_TEST_WAITERS = 'Pending test waiters';\nconst SCHEDULED_ASYNC = 'Scheduled async';\nconst SCHEDULED_AUTORUN = 'Scheduled autorun';\n\ntype MaybeDebugInfo = BackburnerDebugInfo | null;\n\ninterface SettledState {\n  hasPendingTimers: boolean;\n  hasRunLoop: boolean;\n  hasPendingLegacyWaiters: boolean;\n  hasPendingTestWaiters: boolean;\n  hasPendingRequests: boolean;\n  isRenderPending: boolean;\n}\n\ninterface SummaryInfo {\n  hasPendingRequests: boolean;\n  hasPendingLegacyWaiters: boolean;\n  hasPendingTestWaiters: boolean;\n  pendingTestWaiterInfo: PendingWaiterState;\n  autorunStackTrace: string | undefined | null;\n  pendingTimersCount: number;\n  hasPendingTimers: boolean;\n  pendingTimersStackTraces: (string | undefined)[];\n  pendingScheduledQueueItemCount: number;\n  pendingScheduledQueueItemStackTraces: (string | undefined)[];\n  hasRunLoop: boolean;\n  isRenderPending: boolean;\n}\n\n/**\n * The base functionality which may be present on the `SettledState` interface\n * in the `settled` module (**not** the one in this module).\n */\nexport default interface DebugInfo {\n  toConsole: () => void;\n}\n\n/**\n * Determines if the `getDebugInfo` method is available in the\n * running verison of backburner.\n *\n * @returns {boolean} True if `getDebugInfo` is present in backburner, otherwise false.\n */\nexport function backburnerDebugInfoAvailable() {\n  return typeof _backburner.getDebugInfo === 'function';\n}\n\n/**\n * Retrieves debug information from backburner's current deferred actions queue (runloop instance).\n * If the `getDebugInfo` method isn't available, it returns `null`.\n *\n * @public\n * @returns {MaybeDebugInfo | null} Backburner debugInfo or, if the getDebugInfo method is not present, null\n */\nexport function getDebugInfo(): MaybeDebugInfo {\n  return _backburner.DEBUG === true && backburnerDebugInfoAvailable()\n    ? <BackburnerDebugInfo>_backburner.getDebugInfo()\n    : null;\n}\n\n/**\n * Encapsulates debug information for an individual test. Aggregates information\n * from:\n * - info provided by getSettledState\n *    - hasPendingTimers\n *    - hasRunLoop\n *    - hasPendingWaiters\n *    - hasPendingRequests\n * - info provided by backburner's getDebugInfo method (timers, schedules, and stack trace info)\n *\n */\nexport class TestDebugInfo implements DebugInfo {\n  private _settledState: SettledState;\n  private _debugInfo: MaybeDebugInfo;\n  private _summaryInfo: SummaryInfo | undefined = undefined;\n\n  constructor(\n    settledState: SettledState,\n    debugInfo: MaybeDebugInfo = getDebugInfo(),\n  ) {\n    this._settledState = settledState;\n    this._debugInfo = debugInfo;\n  }\n\n  get summary(): SummaryInfo {\n    if (!this._summaryInfo) {\n      this._summaryInfo = { ...(this._settledState as SummaryInfo) };\n\n      if (this._debugInfo) {\n        this._summaryInfo.autorunStackTrace =\n          this._debugInfo.autorun && this._debugInfo.autorun.stack;\n        this._summaryInfo.pendingTimersCount = this._debugInfo.timers.length;\n        this._summaryInfo.hasPendingTimers =\n          this._settledState.hasPendingTimers &&\n          this._summaryInfo.pendingTimersCount > 0;\n        this._summaryInfo.pendingTimersStackTraces = this._debugInfo.timers.map(\n          (timer) => timer.stack,\n        );\n\n        this._summaryInfo.pendingScheduledQueueItemCount =\n          this._debugInfo.instanceStack\n            .filter(isNotNullable)\n            .reduce((total, item) => {\n              Object.values(item).forEach((queueItems) => {\n                // SAFETY: this cast is required for versions of Ember which do\n                // not supply a correct definition of these types. It should\n                // also be compatible with the version where Ember *does* supply\n                // the types correctly.\n                total +=\n                  (queueItems as Array<unknown> | undefined)?.length ?? 0;\n              });\n\n              return total;\n            }, 0);\n        this._summaryInfo.pendingScheduledQueueItemStackTraces =\n          this._debugInfo.instanceStack\n            .filter(isNotNullable)\n            .reduce((stacks, deferredActionQueues) => {\n              Object.values(deferredActionQueues).forEach((queueItems) => {\n                // SAFETY: this cast is required for versions of Ember which do\n                // not supply a correct definition of these types. It should\n                // also be compatible with the version where Ember *does* supply\n                // the types correctly.\n                (queueItems as Array<{ stack: string }> | undefined)?.forEach(\n                  (queueItem) =>\n                    queueItem.stack && stacks.push(queueItem.stack),\n                );\n              });\n              return stacks;\n            }, [] as string[]);\n      }\n\n      if (this._summaryInfo.hasPendingTestWaiters) {\n        this._summaryInfo.pendingTestWaiterInfo = getPendingWaiterState();\n      }\n    }\n\n    return this._summaryInfo;\n  }\n\n  toConsole(_console = console): void {\n    const summary = this.summary;\n\n    if (summary.hasPendingRequests) {\n      _console.log(PENDING_AJAX_REQUESTS);\n    }\n\n    if (summary.hasPendingLegacyWaiters) {\n      _console.log(PENDING_TEST_WAITERS);\n    }\n\n    if (summary.hasPendingTestWaiters) {\n      if (!summary.hasPendingLegacyWaiters) {\n        _console.log(PENDING_TEST_WAITERS);\n      }\n\n      Object.keys(summary.pendingTestWaiterInfo.waiters).forEach(\n        (waiterName) => {\n          const waiterDebugInfo =\n            summary.pendingTestWaiterInfo.waiters[waiterName];\n\n          if (Array.isArray(waiterDebugInfo)) {\n            _console.group(waiterName);\n            waiterDebugInfo.forEach((debugInfo) => {\n              _console.log(\n                `${debugInfo.label ? debugInfo.label : 'stack'}: ${\n                  debugInfo.stack\n                }`,\n              );\n            });\n            _console.groupEnd();\n          } else {\n            _console.log(waiterName);\n          }\n        },\n      );\n    }\n\n    if (\n      summary.hasPendingTimers ||\n      summary.pendingScheduledQueueItemCount > 0\n    ) {\n      _console.group(SCHEDULED_ASYNC);\n\n      summary.pendingTimersStackTraces.forEach((timerStack) => {\n        _console.log(timerStack);\n      });\n\n      summary.pendingScheduledQueueItemStackTraces.forEach(\n        (scheduleQueueItemStack) => {\n          _console.log(scheduleQueueItemStack);\n        },\n      );\n\n      _console.groupEnd();\n    }\n\n    if (\n      summary.hasRunLoop &&\n      summary.pendingTimersCount === 0 &&\n      summary.pendingScheduledQueueItemCount === 0\n    ) {\n      _console.log(SCHEDULED_AUTORUN);\n\n      if (summary.autorunStackTrace) {\n        _console.log(summary.autorunStackTrace);\n      }\n    }\n\n    debugInfoHelpers.forEach((helper: DebugInfoHelper) => {\n      helper.log();\n    });\n  }\n\n  _formatCount(title: string, count: number): string {\n    return `${title}: ${count}`;\n  }\n}\n\n// eslint-disable-next-line require-jsdoc, @typescript-eslint/no-empty-object-type\nfunction isNotNullable<T extends {}>(value: T | null | undefined): value is T {\n  return value != null;\n}\n"],"names":["PENDING_AJAX_REQUESTS","PENDING_TEST_WAITERS","SCHEDULED_ASYNC","SCHEDULED_AUTORUN","backburnerDebugInfoAvailable","_backburner","getDebugInfo","DEBUG","TestDebugInfo","_settledState","_debugInfo","_summaryInfo","undefined","constructor","settledState","debugInfo","summary","autorunStackTrace","autorun","stack","pendingTimersCount","timers","length","hasPendingTimers","pendingTimersStackTraces","map","timer","pendingScheduledQueueItemCount","instanceStack","filter","isNotNullable","reduce","total","item","Object","values","forEach","queueItems","pendingScheduledQueueItemStackTraces","stacks","deferredActionQueues","queueItem","push","hasPendingTestWaiters","pendingTestWaiterInfo","getPendingWaiterState","toConsole","_console","console","hasPendingRequests","log","hasPendingLegacyWaiters","keys","waiters","waiterName","waiterDebugInfo","Array","isArray","group","label","groupEnd","timerStack","scheduleQueueItemStack","hasRunLoop","debugInfoHelpers","helper","_formatCount","title","count","value"],"mappings":"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"}