{"version":3,"file":"warnings.js","sources":["../../src/-internal/warnings.ts"],"sourcesContent":["import type { BaseContext } from '../setup-context';\nimport { registerWarnHandler } from '@ember/debug';\nimport isPromise from './is-promise.ts';\n\nexport interface WarningOptions {\n  id?: string;\n}\n\nexport interface Warning {\n  message: string;\n  options?: WarningOptions;\n}\n\n// the WARNINGS data structure which is used to weakly associated warnings with\n// the test context their occurred within\nconst WARNINGS = new WeakMap<BaseContext, Array<Warning>>();\n\n/**\n *\n * Provides the list of warnings associated with a given base context;\n *\n * @private\n * @param {BaseContext} [context] the test context\n * @return {Array<Warning>} the warnings associated with the corresponding BaseContext;\n */\nexport function getWarningsForContext(context: BaseContext): Array<Warning> {\n  if (!context) {\n    throw new TypeError(\n      `[@ember/test-helpers] could not get warnings for an invalid test context: '${context}'`,\n    );\n  }\n\n  let warnings = WARNINGS.get(context);\n\n  if (!Array.isArray(warnings)) {\n    warnings = [];\n    WARNINGS.set(context, warnings);\n  }\n\n  return warnings;\n}\n\n/**\n *\n * Provides the list of warnings associated with a given test context which\n * occurred only while a the provided callback is executed. This callback can be\n * synchronous, or it can be an async function.\n *\n * @private\n * @param {BaseContext} [context] the test context\n * @param {Function} [callback] The callback that when executed will have its warnings recorded\n * @return {Array<Warning>} The warnings associated with the corresponding baseContext which occurred while the CallbackFunction was executed\n */\nexport function getWarningsDuringCallbackForContext(\n  context: BaseContext,\n  callback: () => void,\n): Array<Warning> | Promise<Array<Warning>> {\n  if (!context) {\n    throw new TypeError(\n      `[@ember/test-helpers] could not get warnings for an invalid test context: '${context}'`,\n    );\n  }\n\n  const warnings = getWarningsForContext(context);\n  const previousLength = warnings.length;\n\n  const result = callback();\n\n  if (isPromise(result)) {\n    return Promise.resolve(result).then(() => {\n      return warnings.slice(previousLength); // only return warnings created as a result of the callback\n    });\n  } else {\n    return warnings.slice(previousLength); // only return warnings created as a result of the callback\n  }\n}\n\n// This provides (when the environment supports) queryParam support for warnings:\n// * squelch warnings by name via: `/tests/index.html?disabledWarnings=this-property-fallback,some-other-thing`\n// * enable a debuggger when a warning by a specific name is encountered via: `/tests/index.html?debugWarnings=some-other-thing` when the\nif (typeof URLSearchParams !== 'undefined') {\n  const queryParams = new URLSearchParams(\n    document.location.search.substring(1),\n  );\n  const disabledWarnings = queryParams.get('disabledWarnings');\n  const debugWarnings = queryParams.get('debugWarnings');\n\n  // When using `/tests/index.html?disabledWarnings=this-property-fallback,some-other-thing`\n  // those warnings will be squelched\n  if (disabledWarnings) {\n    registerWarnHandler((message, options, next) => {\n      if (!options || !disabledWarnings.includes(options.id)) {\n        next.apply(null, [message, options]);\n      }\n    });\n  }\n\n  // When using `/tests/index.html?debugWarnings=some-other-thing` when the\n  // `some-other-thing` warning is triggered, this `debugger` will be hit`\n  if (debugWarnings) {\n    registerWarnHandler((message, options, next) => {\n      if (options && debugWarnings.includes(options.id)) {\n        debugger; // eslint-disable-line no-debugger\n      }\n\n      next.apply(null, [message, options]);\n    });\n  }\n}\n"],"names":["WARNINGS","WeakMap","getWarningsForContext","context","TypeError","warnings","get","Array","isArray","set","getWarningsDuringCallbackForContext","callback","previousLength","length","result","isPromise","Promise","resolve","then","slice","URLSearchParams","queryParams","document","location","search","substring","disabledWarnings","debugWarnings","registerWarnHandler","message","options","next","includes","id","apply"],"mappings":"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"}