{"version":3,"file":"-get-element.js","sources":["../../src/dom/-get-element.ts"],"sourcesContent":["import getRootElement from './get-root-element.ts';\nimport { type Target, isDocument, isElement } from './-target.ts';\nimport {\n  type IDOMElementDescriptor,\n  lookupDescriptorData,\n  resolveDOMElement,\n} from 'dom-element-descriptors';\n\nfunction getElement<\n  K extends keyof (HTMLElementTagNameMap | SVGElementTagNameMap),\n>(target: K): (HTMLElementTagNameMap[K] | SVGElementTagNameMap[K]) | null;\nfunction getElement<K extends keyof HTMLElementTagNameMap>(\n  target: K,\n): HTMLElementTagNameMap[K] | null;\nfunction getElement<K extends keyof SVGElementTagNameMap>(\n  target: K,\n): SVGElementTagNameMap[K] | null;\nfunction getElement(target: string): Element | null;\nfunction getElement(target: Element): Element;\nfunction getElement(target: IDOMElementDescriptor): Element | null;\nfunction getElement(target: Document): Document;\nfunction getElement(target: Window): Document;\nfunction getElement(target: string | IDOMElementDescriptor): Element | null;\nfunction getElement(target: Target): Element | Document | null;\n/**\n  Used internally by the DOM interaction helpers to find one element.\n\n  @private\n  @param {string|Element} target the element or selector to retrieve\n  @returns {Element} the target or selector\n*/\nfunction getElement(target: Target): Element | Document | null {\n  if (typeof target === 'string') {\n    const rootElement = getRootElement();\n\n    return rootElement.querySelector(target);\n  } else if (isElement(target) || isDocument(target)) {\n    return target;\n  } else if (target instanceof Window) {\n    return target.document;\n  } else {\n    const descriptorData = lookupDescriptorData(target);\n    if (descriptorData) {\n      return resolveDOMElement(descriptorData);\n    } else {\n      throw new Error(\n        'Must use an element, selector string, or DOM element descriptor',\n      );\n    }\n  }\n}\n\nexport default getElement;\n"],"names":["getElement","target","rootElement","getRootElement","querySelector","isElement","isDocument","Window","document","descriptorData","lookupDescriptorData","resolveDOMElement","Error"],"mappings":";;;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAUA,CAACC,MAAc,EAA6B;AAC7D,EAAA,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;AAC9B,IAAA,MAAMC,WAAW,GAAGC,cAAc,EAAE,CAAA;AAEpC,IAAA,OAAOD,WAAW,CAACE,aAAa,CAACH,MAAM,CAAC,CAAA;GACzC,MAAM,IAAII,SAAS,CAACJ,MAAM,CAAC,IAAIK,UAAU,CAACL,MAAM,CAAC,EAAE;AAClD,IAAA,OAAOA,MAAM,CAAA;AACf,GAAC,MAAM,IAAIA,MAAM,YAAYM,MAAM,EAAE;IACnC,OAAON,MAAM,CAACO,QAAQ,CAAA;AACxB,GAAC,MAAM;AACL,IAAA,MAAMC,cAAc,GAAGC,oBAAoB,CAACT,MAAM,CAAC,CAAA;AACnD,IAAA,IAAIQ,cAAc,EAAE;MAClB,OAAOE,iBAAiB,CAACF,cAAc,CAAC,CAAA;AAC1C,KAAC,MAAM;AACL,MAAA,MAAM,IAAIG,KAAK,CACb,iEACF,CAAC,CAAA;AACH,KAAA;AACF,GAAA;AACF;;;;"}