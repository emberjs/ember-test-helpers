{"version":3,"file":"build-owner.js","sources":["../src/build-owner.ts"],"sourcesContent":["import Application from '@ember/application';\nimport type { Resolver } from '@ember/owner';\n\nimport legacyBuildRegistry from './-internal/build-registry.ts';\nimport type EmberOwner from '@ember/owner';\nimport type { SimpleElement } from '@simple-dom/interface';\n\nexport interface Owner extends EmberOwner {\n  _emberTestHelpersMockOwner?: boolean;\n  rootElement?: string | Element | SimpleElement | null;\n\n  _lookupFactory?(key: string): any;\n\n  // Note: this should be the same as `Application['visit']`, but that *type* is\n  // only available from Ember 4.12 on. Once we require Ember >= 5.1 and rely on\n  // the stable types, this will not be necessary and the related `@ts-ignore`\n  // below can also be removed.\n  visit(url: string, options?: { [key: string]: any }): Promise<any>;\n}\n\n/**\n  Creates an \"owner\" (an object that either _is_ or duck-types like an\n  `Ember.ApplicationInstance`) from the provided options.\n\n  If `options.application` is present (e.g. setup by an earlier call to\n  `setApplication`) an `Ember.ApplicationInstance` is built via\n  `application.buildInstance()`.\n\n  If `options.application` is not present, we fall back to using\n  `options.resolver` instead (setup via `setResolver`). This creates a mock\n  \"owner\" by using a custom created combination of `Ember.Registry`,\n  `Ember.Container`, `Ember._ContainerProxyMixin`, and\n  `Ember._RegistryProxyMixin`.\n\n  @private\n  @param {Ember.Application} [application] the Ember.Application to build an instance from\n  @param {Ember.Resolver} [resolver] the resolver to use to back a \"mock owner\"\n  @returns {Promise<Ember.ApplicationInstance>} a promise resolving to the generated \"owner\"\n*/\nexport default function buildOwner(\n  application: Application | undefined | null,\n  resolver: Resolver | undefined | null,\n): Promise<Owner> {\n  if (application) {\n    // @ts-ignore: this type is correct and will check against Ember 4.12 or 5.1\n    // or later. However, the first round of preview types in Ember 4.8 does not\n    // include the `visit` API (it was missing for many years!) and therefore\n    // there is no way to make this assignable accross all supported versions.\n    return application.boot().then((app) => app.buildInstance().boot());\n  }\n\n  if (!resolver) {\n    throw new Error(\n      'You must set up the ember-test-helpers environment with either `setResolver` or `setApplication` before running any tests.',\n    );\n  }\n\n  const { owner } = legacyBuildRegistry(resolver) as unknown as {\n    owner: Owner;\n  };\n\n  return Promise.resolve(owner);\n}\n"],"names":["buildOwner","application","resolver","boot","then","app","buildInstance","Error","owner","legacyBuildRegistry","Promise","resolve"],"mappings":";;;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,UAAUA,CAChCC,WAA2C,EAC3CC,QAAqC,EACrB;AAChB,EAAA,IAAID,WAAW,EAAE;AACf;AACA;AACA;AACA;AACA,IAAA,OAAOA,WAAW,CAACE,IAAI,EAAE,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,aAAa,EAAE,CAACH,IAAI,EAAE,CAAC,CAAA;AACrE,GAAA;EAEA,IAAI,CAACD,QAAQ,EAAE;AACb,IAAA,MAAM,IAAIK,KAAK,CACb,4HACF,CAAC,CAAA;AACH,GAAA;EAEA,MAAM;AAAEC,IAAAA,KAAAA;AAAM,GAAC,GAAGC,aAAmB,CAACP,QAAQ,CAE7C,CAAA;AAED,EAAA,OAAOQ,OAAO,CAACC,OAAO,CAACH,KAAK,CAAC,CAAA;AAC/B;;;;"}